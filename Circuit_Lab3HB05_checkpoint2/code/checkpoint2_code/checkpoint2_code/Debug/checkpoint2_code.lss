
checkpoint2_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  00000318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f1  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000636  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000478  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000177c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f6  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00001c06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001ef7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e7       	ldi	r30, 0x70	; 112
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 01 01 	call	0x202	; 0x202 <main>
  8a:	0c 94 36 01 	jmp	0x26c	; 0x26c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <self_test>:

void function_delay(void){				//use to generate clk 1Hz to PD2
	_delay_ms(500);
	PORTD &= (0<<PD2);
	_delay_ms(500);
	PORTD |= (1<<PD2);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	88 bb       	out	0x18, r24	; 24
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	91 9a       	sbi	0x12, 1	; 18
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	83 ed       	ldi	r24, 0xD3	; 211
  a2:	90 e3       	ldi	r25, 0x30	; 48
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <self_test+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <self_test+0x1c>
  ae:	00 00       	nop
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	18 ba       	out	0x18, r1	; 24
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	15 ba       	out	0x15, r1	; 21
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	12 ba       	out	0x12, r1	; 18
  bc:	08 95       	ret

000000be <function_checkstate>:
	state = 0;
	function_blynk();
}

void function_checkstate(void){			//use to check this lamp is on or off
	if(state == 1){
  be:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
  c2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	19 f4       	brne	.+6      	; 0xd0 <function_checkstate+0x12>
		function_countTurnOff();
  ca:	0e 94 c6 00 	call	0x18c	; 0x18c <function_countTurnOff>
  ce:	08 95       	ret
	}
	else{
		function_turnOn();
  d0:	0e 94 b7 00 	call	0x16e	; 0x16e <function_turnOn>
  d4:	08 95       	ret

000000d6 <function_blynk>:
void function_blynk(void){
	int state_blynk = 0;
	int sw_test;
	do{
		sw_test = ~PIND & 0x01;
	}while(sw_test);
  d6:	80 9b       	sbis	0x10, 0	; 16
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <function_blynk>
  da:	00 e0       	ldi	r16, 0x00	; 0
  dc:	10 e0       	ldi	r17, 0x00	; 0
				state_blynk = 1;
			}
			else{
				PORTB = 0x00;
				PORTC = 0x00;
				state_blynk = 0;
  de:	d1 2c       	mov	r13, r1
  e0:	e1 2c       	mov	r14, r1
				state_blynk = 0;
			}
		}
		else{
			if(state_blynk == 0){
				PORTB = on[0];
  e2:	0f 2e       	mov	r0, r31
  e4:	f2 e7       	ldi	r31, 0x72	; 114
  e6:	8f 2e       	mov	r8, r31
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	9f 2e       	mov	r9, r31
  ec:	f0 2d       	mov	r31, r0
				PORTC = on[1];
				state_blynk = 1;
  ee:	cc 24       	eor	r12, r12
  f0:	c3 94       	inc	r12
  f2:	f1 2c       	mov	r15, r1
	}while(sw_test);
	
	while(1){
		if(state == 0){
			if(state_blynk == 0){
				PORTB = off[0];
  f4:	0f 2e       	mov	r0, r31
  f6:	f0 e7       	ldi	r31, 0x70	; 112
  f8:	af 2e       	mov	r10, r31
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	bf 2e       	mov	r11, r31
  fe:	f0 2d       	mov	r31, r0
	do{
		sw_test = ~PIND & 0x01;
	}while(sw_test);
	
	while(1){
		if(state == 0){
 100:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
 104:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <__data_end+0x1>
 108:	89 2b       	or	r24, r25
 10a:	79 f4       	brne	.+30     	; 0x12a <function_blynk+0x54>
			if(state_blynk == 0){
 10c:	01 2b       	or	r16, r17
 10e:	41 f4       	brne	.+16     	; 0x120 <function_blynk+0x4a>
				PORTB = off[0];
 110:	f5 01       	movw	r30, r10
 112:	80 81       	ld	r24, Z
 114:	88 bb       	out	0x18, r24	; 24
				PORTC = off[1];
 116:	81 81       	ldd	r24, Z+1	; 0x01
 118:	85 bb       	out	0x15, r24	; 21
				state_blynk = 1;
 11a:	0c 2d       	mov	r16, r12
 11c:	1f 2d       	mov	r17, r15
 11e:	13 c0       	rjmp	.+38     	; 0x146 <function_blynk+0x70>
			}
			else{
				PORTB = 0x00;
 120:	18 ba       	out	0x18, r1	; 24
				PORTC = 0x00;
 122:	15 ba       	out	0x15, r1	; 21
				state_blynk = 0;
 124:	0d 2d       	mov	r16, r13
 126:	1e 2d       	mov	r17, r14
 128:	0e c0       	rjmp	.+28     	; 0x146 <function_blynk+0x70>
			}
		}
		else{
			if(state_blynk == 0){
 12a:	01 2b       	or	r16, r17
 12c:	41 f4       	brne	.+16     	; 0x13e <function_blynk+0x68>
				PORTB = on[0];
 12e:	f4 01       	movw	r30, r8
 130:	80 81       	ld	r24, Z
 132:	88 bb       	out	0x18, r24	; 24
				PORTC = on[1];
 134:	81 81       	ldd	r24, Z+1	; 0x01
 136:	85 bb       	out	0x15, r24	; 21
				state_blynk = 1;
 138:	0c 2d       	mov	r16, r12
 13a:	1f 2d       	mov	r17, r15
 13c:	04 c0       	rjmp	.+8      	; 0x146 <function_blynk+0x70>
			}
			else{
				PORTB = 0x00;
 13e:	18 ba       	out	0x18, r1	; 24
				PORTC = 0x00;
 140:	15 ba       	out	0x15, r1	; 21
				state_blynk = 0;
 142:	0d 2d       	mov	r16, r13
 144:	1e 2d       	mov	r17, r14
	while(1){
		if(state == 0){
			if(state_blynk == 0){
				PORTB = off[0];
				PORTC = off[1];
				state_blynk = 1;
 146:	ca e0       	ldi	r28, 0x0A	; 10
 148:	d0 e0       	ldi	r29, 0x00	; 0
				PORTC = 0x00;
				state_blynk = 0;
			}
		}
		for(int i=0; i<10; i++){
			if(~PIND & 0x01){
 14a:	80 99       	sbic	0x10, 0	; 16
 14c:	04 c0       	rjmp	.+8      	; 0x156 <function_blynk+0x80>
				do{
					sw_test = ~PIND & 0x01;
				}while(sw_test);
 14e:	80 9b       	sbis	0x10, 0	; 16
 150:	fe cf       	rjmp	.-4      	; 0x14e <function_blynk+0x78>
				
				function_checkstate();
 152:	0e 94 5f 00 	call	0xbe	; 0xbe <function_checkstate>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	ff ef       	ldi	r31, 0xFF	; 255
 158:	20 e7       	ldi	r18, 0x70	; 112
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	f1 50       	subi	r31, 0x01	; 1
 15e:	20 40       	sbci	r18, 0x00	; 0
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <function_blynk+0x86>
 164:	00 c0       	rjmp	.+0      	; 0x166 <function_blynk+0x90>
 166:	00 00       	nop
 168:	21 97       	sbiw	r28, 0x01	; 1
				PORTB = 0x00;
				PORTC = 0x00;
				state_blynk = 0;
			}
		}
		for(int i=0; i<10; i++){
 16a:	79 f7       	brne	.-34     	; 0x14a <function_blynk+0x74>
 16c:	c9 cf       	rjmp	.-110    	; 0x100 <function_blynk+0x2a>

0000016e <function_turnOn>:
	_delay_ms(500);
	PORTD |= (1<<PD2);
}

void function_turnOn(void){				//use to turn on the lamp and led
	PORTB = on[0];
 16e:	e2 e7       	ldi	r30, 0x72	; 114
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	88 bb       	out	0x18, r24	; 24
	PORTC = on[1];
 176:	81 81       	ldd	r24, Z+1	; 0x01
 178:	85 bb       	out	0x15, r24	; 21
	PORTD = PORTD | (1<<PD1);
 17a:	91 9a       	sbi	0x12, 1	; 18
	state = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <__data_end+0x1>
 184:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
	function_blynk();
 188:	0e 94 6b 00 	call	0xd6	; 0xd6 <function_blynk>

0000018c <function_countTurnOff>:
	}
}

void function_countTurnOff(void){		//use to countdown and turn lamp off
	int digit0, digit1;
	for(int i=20;i>0;i--){
 18c:	24 e1       	ldi	r18, 0x14	; 20
 18e:	30 e0       	ldi	r19, 0x00	; 0
		digit1 = i/10;
		digit0 = i%10;
		PORTB = LOOKUPTB[digit1];
 190:	ca e0       	ldi	r28, 0x0A	; 10
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	c9 01       	movw	r24, r18
 196:	be 01       	movw	r22, r28
 198:	0e 94 0e 01 	call	0x21c	; 0x21c <__divmodhi4>
 19c:	fb 01       	movw	r30, r22
 19e:	e0 5a       	subi	r30, 0xA0	; 160
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	40 81       	ld	r20, Z
 1a4:	48 bb       	out	0x18, r20	; 24
		PORTC = LOOKUPTB[digit0];
 1a6:	fc 01       	movw	r30, r24
 1a8:	e0 5a       	subi	r30, 0xA0	; 160
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	4f ef       	ldi	r20, 0xFF	; 255
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	41 50       	subi	r20, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <function_countTurnOff+0x2a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <function_countTurnOff+0x34>
 1c0:	00 00       	nop
	}
}

void function_countTurnOff(void){		//use to countdown and turn lamp off
	int digit0, digit1;
	for(int i=20;i>0;i--){
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	31 09       	sbc	r19, r1
 1c6:	31 f7       	brne	.-52     	; 0x194 <function_countTurnOff+0x8>
		digit0 = i%10;
		PORTB = LOOKUPTB[digit1];
		PORTC = LOOKUPTB[digit0];
		_delay_ms(1000);
	}
	PORTB = off[0];
 1c8:	e0 e7       	ldi	r30, 0x70	; 112
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	88 bb       	out	0x18, r24	; 24
	PORTC = off[1];
 1d0:	81 81       	ldd	r24, Z+1	; 0x01
 1d2:	85 bb       	out	0x15, r24	; 21
	PORTD = PORTD & (0<<PD1);
 1d4:	82 b3       	in	r24, 0x12	; 18
 1d6:	12 ba       	out	0x12, r1	; 18
	state = 0;
 1d8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <__data_end+0x1>
 1dc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
	function_blynk();
 1e0:	0e 94 6b 00 	call	0xd6	; 0xd6 <function_blynk>

000001e4 <wait_until_sw_pressed>:
void wait_until_sw_pressed(){			//wait for sw is pressed
	int sw;
	do{
		do{
			sw = ~PIND & 0x01;
		} while (sw);
 1e4:	80 9b       	sbis	0x10, 0	; 16
 1e6:	fe cf       	rjmp	.-4      	; 0x1e4 <wait_until_sw_pressed>
 1e8:	8f e3       	ldi	r24, 0x3F	; 63
 1ea:	9c e9       	ldi	r25, 0x9C	; 156
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <wait_until_sw_pressed+0x8>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <wait_until_sw_pressed+0xe>
 1f2:	00 00       	nop
		_delay_ms(10);
		sw = ~PIND &0x01;
	
	} while (sw);
 1f4:	80 9b       	sbis	0x10, 0	; 16
 1f6:	f6 cf       	rjmp	.-20     	; 0x1e4 <wait_until_sw_pressed>
	do{
		sw = ~PIND & 0x01;
	} while (!sw);
 1f8:	80 99       	sbic	0x10, 0	; 16
 1fa:	fe cf       	rjmp	.-4      	; 0x1f8 <wait_until_sw_pressed+0x14>
	function_checkstate();
 1fc:	0e 94 5f 00 	call	0xbe	; 0xbe <function_checkstate>
 200:	08 95       	ret

00000202 <main>:
}

int main(void){
	
	DDRB = 0xFF;					//set direction of data
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 206:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x0E;	
 208:	8e e0       	ldi	r24, 0x0E	; 14
 20a:	81 bb       	out	0x11, r24	; 17
	
	PORTB = 0x00;					//out to port
 20c:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
 20e:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 210:	12 ba       	out	0x12, r1	; 18
	
	self_test();					//self test before using
 212:	0e 94 49 00 	call	0x92	; 0x92 <self_test>
	
	while(1){
		//function_delay();			//checkpoint 2.1
		wait_until_sw_pressed();	//checkpoint 2.2
 216:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <wait_until_sw_pressed>
 21a:	fd cf       	rjmp	.-6      	; 0x216 <main+0x14>

0000021c <__divmodhi4>:
 21c:	97 fb       	bst	r25, 7
 21e:	07 2e       	mov	r0, r23
 220:	16 f4       	brtc	.+4      	; 0x226 <__divmodhi4+0xa>
 222:	00 94       	com	r0
 224:	07 d0       	rcall	.+14     	; 0x234 <__divmodhi4_neg1>
 226:	77 fd       	sbrc	r23, 7
 228:	09 d0       	rcall	.+18     	; 0x23c <__divmodhi4_neg2>
 22a:	0e 94 22 01 	call	0x244	; 0x244 <__udivmodhi4>
 22e:	07 fc       	sbrc	r0, 7
 230:	05 d0       	rcall	.+10     	; 0x23c <__divmodhi4_neg2>
 232:	3e f4       	brtc	.+14     	; 0x242 <__divmodhi4_exit>

00000234 <__divmodhi4_neg1>:
 234:	90 95       	com	r25
 236:	81 95       	neg	r24
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	08 95       	ret

0000023c <__divmodhi4_neg2>:
 23c:	70 95       	com	r23
 23e:	61 95       	neg	r22
 240:	7f 4f       	sbci	r23, 0xFF	; 255

00000242 <__divmodhi4_exit>:
 242:	08 95       	ret

00000244 <__udivmodhi4>:
 244:	aa 1b       	sub	r26, r26
 246:	bb 1b       	sub	r27, r27
 248:	51 e1       	ldi	r21, 0x11	; 17
 24a:	07 c0       	rjmp	.+14     	; 0x25a <__udivmodhi4_ep>

0000024c <__udivmodhi4_loop>:
 24c:	aa 1f       	adc	r26, r26
 24e:	bb 1f       	adc	r27, r27
 250:	a6 17       	cp	r26, r22
 252:	b7 07       	cpc	r27, r23
 254:	10 f0       	brcs	.+4      	; 0x25a <__udivmodhi4_ep>
 256:	a6 1b       	sub	r26, r22
 258:	b7 0b       	sbc	r27, r23

0000025a <__udivmodhi4_ep>:
 25a:	88 1f       	adc	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	5a 95       	dec	r21
 260:	a9 f7       	brne	.-22     	; 0x24c <__udivmodhi4_loop>
 262:	80 95       	com	r24
 264:	90 95       	com	r25
 266:	bc 01       	movw	r22, r24
 268:	cd 01       	movw	r24, r26
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
