
code_checkpoint1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000000f2  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d1  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  000009e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  0000178f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  8e:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <test_mode>:
	0b01110111, 0b01111100,
	0b00111001, 0b01011110,
	0b01111001, 0b01110001
};

void test_mode(void){
  96:	e0 e0       	ldi	r30, 0x00	; 0
  98:	f1 e0       	ldi	r31, 0x01	; 1
  9a:	20 e1       	ldi	r18, 0x10	; 16
  9c:	31 e0       	ldi	r19, 0x01	; 1
	for(int i=0;i<16;i++){
		PORTB = LOOKUPTB[i];
  9e:	81 91       	ld	r24, Z+
  a0:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	87 ea       	ldi	r24, 0xA7	; 167
  a4:	91 e6       	ldi	r25, 0x61	; 97
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <test_mode+0x10>
  aa:	00 c0       	rjmp	.+0      	; 0xac <test_mode+0x16>
  ac:	00 00       	nop
	0b00111001, 0b01011110,
	0b01111001, 0b01110001
};

void test_mode(void){
	for(int i=0;i<16;i++){
  ae:	e2 17       	cp	r30, r18
  b0:	f3 07       	cpc	r31, r19
  b2:	a9 f7       	brne	.-22     	; 0x9e <test_mode+0x8>
		PORTB = LOOKUPTB[i];
		_delay_ms(100);
	}
}
  b4:	08 95       	ret

000000b6 <main>:

int main(void)
{

	unsigned char DISPLY, SWITCH_V;
	DDRB = 0xFF; //port B = output
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x00; //port C = input
  ba:	17 b8       	out	0x07, r1	; 7
	while(1)
	{
		if (~PIND & 0x01){
  bc:	48 99       	sbic	0x09, 0	; 9
  be:	0f c0       	rjmp	.+30     	; 0xde <main+0x28>
  c0:	84 e1       	ldi	r24, 0x14	; 20
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	e7 ea       	ldi	r30, 0xA7	; 167
  c6:	f1 e6       	ldi	r31, 0x61	; 97
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x12>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x18>
  ce:	00 00       	nop
			for(int i=0; i<20;i++){
				_delay_ms(100);
				if (~PIND & 0x01)
  d0:	48 99       	sbic	0x09, 0	; 9
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x22>
  d4:	01 97       	sbiw	r24, 0x01	; 1
	DDRB = 0xFF; //port B = output
	DDRC = 0x00; //port C = input
	while(1)
	{
		if (~PIND & 0x01){
			for(int i=0; i<20;i++){
  d6:	b1 f7       	brne	.-20     	; 0xc4 <main+0xe>
					//do nothing
				}
				else
					break;
			}
			if (~PIND & 0x01){
  d8:	48 9b       	sbis	0x09, 0	; 9
				test_mode();
  da:	0e 94 4b 00 	call	0x96	; 0x96 <test_mode>
			}
		}
		
		SWITCH_V = PINC;
  de:	e6 b1       	in	r30, 0x06	; 6
		SWITCH_V &= 0x0F;
		DISPLY = LOOKUPTB[SWITCH_V];
  e0:	ef 70       	andi	r30, 0x0F	; 15
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	e0 50       	subi	r30, 0x00	; 0
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	80 81       	ld	r24, Z
		PORTB = DISPLY;
  ea:	85 b9       	out	0x05, r24	; 5
	}
  ec:	e7 cf       	rjmp	.-50     	; 0xbc <main+0x6>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
